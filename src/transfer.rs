use super::keys::{PublicKey, Signature};
use super::money::Money;
use crdts::Dot;
use serde::{Deserialize, Serialize};
use std::fmt::Debug;
use threshold_crypto;

/// Transfer ID.
pub type TransferId = Dot<PublicKey>;

/// A transfer of money between two keys.
#[derive(Clone, Hash, Eq, PartialEq, PartialOrd, Serialize, Deserialize, Debug)]
pub struct Transfer {
    /// Transfer ID, containing source key.
    pub id: TransferId,
    /// The destination to transfer to.
    pub to: PublicKey,
    /// The amount to transfer.
    pub amount: Money,
}

/// An Actor cmd.
#[derive(Clone, Hash, Eq, PartialEq, PartialOrd, Serialize, Deserialize, Debug)]
pub struct ValidateTransfer {
    /// The transfer.
    pub transfer: Transfer,
    /// Actor signature over the transfer.
    pub actor_signature: Signature,
}

/// The Replica event raised when
/// ValidateTransfer cmd has been successful.
#[derive(Clone, Hash, Eq, PartialEq, PartialOrd, Serialize, Deserialize, Debug)]
pub struct TransferValidated {
    /// The cmd generated by Actor.
    pub transfer_cmd: ValidateTransfer,
    /// Replica signature over the transfer cmd.
    pub replica_signature: threshold_crypto::SignatureShare,
    /// The PK Set of the Replicas
    pub replicas: threshold_crypto::PublicKeySet,
}

/// An Actor cmd.
#[derive(Clone, Hash, Eq, PartialEq, PartialOrd, Serialize, Deserialize, Debug)]
pub struct RegisterTransfer {
    /// The transfer proof.
    pub proof: ProofOfAgreement,
}

/// The Replica event raised when
/// RegisterTransfer cmd has been successful.
#[derive(Clone, Hash, Eq, PartialEq, PartialOrd, Serialize, Deserialize, Debug)]
pub struct TransferRegistered {
    /// The transfer proof.
    pub proof: ProofOfAgreement,
}

/// The aggregated Replica signatures of the Actor transfer cmd.
#[derive(Clone, Hash, Eq, PartialEq, PartialOrd, Serialize, Deserialize, Debug)]
pub struct ProofOfAgreement {
    /// The cmd generated by Actor.
    pub transfer_cmd: ValidateTransfer,
    /// Quorum of Replica sigs over the transfer cmd.
    pub section_sig: Signature,
}

// /// (Draft) An Actor cmd to roll back a failed transfer.
// #[derive(Clone, Hash, Eq, PartialEq, PartialOrd, Ord, Serialize, Deserialize, Debug)]
// pub struct CancelTransfer {
//     /// The transfer id.
//     pub transfer_id: TransferId,
//     /// Actor signature over the transfer id.
//     pub actor_signature: Signature,
// }

/// Notification of a Transfer sent to a recipient.
#[derive(Hash, Eq, PartialEq, PartialOrd, Clone, Serialize, Deserialize, Debug)]
pub struct TransferNotification(pub ProofOfAgreement);
